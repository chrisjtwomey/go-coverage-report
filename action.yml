name: 'Go Unit Test Coverage Report'
description: 'Post Go code coverage reports to pull requests.'
author: "Friedrich GroÃŸe"
branding:
  icon: 'umbrella'
  color: 'blue'

inputs:
  version:
    description: 'The exact version tag of the go-coverage-report tool to use.'
    required: true
    default: "v1.3.0"

  sha256sum:
    description: 'Optional SHA256 checksum of the tarball when downloading the go-coverage-report binary.'
    required: false
  
  app-name:
    description: 'Name of the app'
    required: true

  coverage-artifact-name:
    description: 'The name of the artifact containing the code coverage results.'
    required: true
    default: "code-coverage"

  coverage-file-name:
    description: 'The name of the file containing the code coverage results.'
    required: true
    default: "coverage.txt"

  root-package:
    description: |
      The Go import path of the tested repository to add as a prefix to all paths of the
      changed files. This is useful to map the changed files (e.g., ["foo/my_file.go"]
      to their coverage profile which uses the full package name to identify the files
      (e.g., "github.com/fgrosse/example/foo/my_file.go"). Note that currently, 
      packages with a different name than their directory are not supported.
    required: false
    default: "github.com/${{ github.repository }}"

  skip-comment:
    description: |
      Skip creating or updating the pull request comment. This may be useful when you want
      to generate the coverage report and modify it in your own scripts.
    required: false
    default: 'false'

  trim:
    description: Trim a prefix in the "Impacted Packages" column of the markdown report.
    required: false

  github-baseline-workflow-ref:
    description: |
      The ref of the GitHub actions Workflow that produces the baseline coverage.
      By default, the GitHub Actions Workflow ref is used
      (e.g. "octocat/hello-world/.github/workflows/my-workflow.yml@refs/heads/my_branch").
      You can aso just pass the name of the Workflow file directly (e.g. "my-workflow.yml").
    default: ${{ github.workflow_ref }}
    required: false

outputs:
  coverage_report:
    description: 'The generated coverage report in Markdown format.'
    value: ${{ steps.coverage.outputs.coverage_report }}

runs:
  using: "composite"

  steps:
    - name: Download go-coverage-report
      shell: bash
      id: download
      run: $GITHUB_ACTION_PATH/scripts/download-cli-tool.sh "${{ inputs.version }}" "${{ inputs.sha256sum }}"
      env:
        RUNNER_OS: ${{ runner.os }}
        RUNNER_ARCH: ${{ runner.arch }}

    - name: Get new coverage report
      id: new-coverage-report
      shell: bash
      env:
        GH_REPO: ${{ github.repository }}
        GH_TOKEN: ${{ github.token }}  
      run: |
        gh run download "${{ github.run_id }}" --name=${{ inputs.coverage-artifact-name }} --dir="/tmp/gh-run-download-${{ github.run_id }}"
        mv "/tmp/gh-run-download-${{ github.run_id }}/${{ inputs.coverage-file-name }}" .github/outputs/new-coverage.txt
        rm -r "/tmp/gh-run-download-${{ github.run_id }}"

    - name: Get old coverage report
      id: old-coverage-report
      shell: bash
      env:
        GH_REPO: ${{ github.repository }}
        GH_TOKEN: ${{ github.token }}
        GITHUB_BASELINE_WORKFLOW_REF: ${{ inputs.github-baseline-workflow-ref }}
      run: |
        WORKFLOW=$(basename "${GITHUB_BASELINE_WORKFLOW_REF%%@*}")
        LAST_SUCCESSFUL_RUN_IDS=$(gh run list --status=success --branch="${{ github.base_ref }}" --workflow="${WORKFLOW}" --event=push --json=databaseId -q '.[] | .databaseId')
        if [ -z "$LAST_SUCCESSFUL_RUN_IDS" ]; then
          echo "::error::No successful run found on the target branch"
          exit 1
        fi

        for LAST_SUCCESSFUL_RUN_ID in $LAST_SUCCESSFUL_RUN_IDS; do
          echo "Trying to download from run ID $LAST_SUCCESSFUL_RUN_ID..."
          if gh run download "$LAST_SUCCESSFUL_RUN_ID" --name="${{ inputs.coverage-artifact-name }}" --dir="/tmp/gh-run-download-$LAST_SUCCESSFUL_RUN_ID"; then
            break
          else
            echo "Failed to download from run ID $LAST_SUCCESSFUL_RUN_ID, trying next ID..."
            # fail if we're on our last ID to try
            if [ "$LAST_SUCCESSFUL_RUN_ID" == "${LAST_SUCCESSFUL_RUN_IDS##*$'\n'}" ]; then
              echo "::notice::Failed to download coverage results from all successful runs"
              exit 0
            fi
          fi
        done

        mv "/tmp/gh-run-download-$LAST_SUCCESSFUL_RUN_ID/${{ inputs.coverage-file-name }}" .github/outputs/old-coverage.txt
        rm -r "/tmp/gh-run-download-$LAST_SUCCESSFUL_RUN_ID"

    - name: Get coverage report files
      id: coverage-files
      shell: bash
      run: $GITHUB_ACTION_PATH/scripts/get-coverage-files.sh ".github/outputs/new-coverage.txt" > .github/outputs/coverage-files.json

    - name: Code coverage report
      shell: bash
      id: coverage
      run: $GITHUB_ACTION_PATH/scripts/github-action.sh "${{ github.repository }}" "${{ github.event.pull_request.number }}" "${{ github.run_id }}" "${{ inputs.app-name }}"
      env:
        GH_REPO: ${{ github.repository }}
        GH_TOKEN: ${{ github.token }}
        CHANGED_FILES_PATH: .github/outputs/coverage-files.json
        COVERAGE_ARTIFACT_NAME: ${{ inputs.coverage-artifact-name }}
        COVERAGE_FILE_NAME: ${{ inputs.coverage-file-name }}
        ROOT_PACKAGE: ${{ inputs.root-package }}
        SKIP_COMMENT: ${{ inputs.skip-comment }}
        TRIM_PACKAGE: ${{ inputs.trim }}
